import threading # para realizar tareas en paralelo.
import random
import string
# Importa el m√≥dulo string, que tiene constantes √∫tiles como string.ascii_uppercase (letras may√∫sculas de A-Z).

DIRECTIONS = [(0,1), (1,0)]  # derecha y abajo

def can_place_word(board, word, row, col, direction):
	dr, dc = direction # dr, dc: desplazamientos por direcci√≥n.
	rows = len(board) # rows: n√∫mero de filas en el tablero.
	cols = len(board[0]) # cols: n√∫mero de columnas en el tablero.

	for i in range(len(word)): # Recorre cada letra de la palabra y calcula su posici√≥n final.
		r = row + dr*i
		c = col + dc*i
		if r >= rows or c >= cols: # Verifica que no se salga del tablero.
			return False
		if board[r][c] != word[i] and board[r][c] != ' ':
			return False
	return True

"""if board[r][c] != word[i] and board[r][c] != ' ':
	Esta validaci√≥n permite:
	Colocar letras en celdas vac√≠as (' ').
	Colocar letras encima de letras iguales (por ejemplo, dos palabras cruzando por la misma letra).
	Evita sobrescribir letras diferentes, que da√±ar√≠a otras palabras del tablero."""
		
def place_word(board, word):
	rows = len(board) # n√∫mero de filas del tablero.
	cols = len(board[0]) # n√∫mero de columnas del tablero.

	placed = False # indica si la palabra se ha colocado correctamente (true).
	attempts = 0 # contador de intentos para colocar la palabra.
	while not placed and attempts < 100:
		direction = random.choice(DIRECTIONS) # Selecciona una direcci√≥n aleatoria (horizontal o vertical).
		max_row = rows - (len(word) if direction[0] != 0 else 1) #Calcula el l√≠mite m√°ximo de fila desde donde puede comenzar la palabra sin salirse.
		max_col = cols - (len(word) if direction[1] != 0 else 1) # Calcula el l√≠mite m√°ximo de columna desde donde puede comenzar la palabra sin salirse.
		row = random.randint(0, max_row) # Selecciona una fila aleatoria dentro del rango permitido.
		col = random.randint(0, max_col) # Selecciona una columna aleatoria dentro del rango permitido.

		if can_place_word(board, word, row, col, direction): # Verifica si se puede colocar la palabra en la posici√≥n y direcci√≥n seleccionadas.
			dr, dc = direction # Descompone la direcci√≥n en desplazamientos de fila (dr) y columna (dc).
			for i, ch in enumerate(word): # Recorre cada letra de la palabra junto con su √≠ndice.
				board[row + dr*i][col + dc*i] = ch # Coloca la letra en la posici√≥n correspondiente del tablero.
			placed = True
		attempts += 1
	if not placed:
		print(f"No se pudo colocar la palabra: {word}")

def generate_board(rows, cols, words): # Se define una funci√≥n que genera un tablero de sopa de letras.
	board = [[random.choice(string.ascii_uppercase) for _ in range(cols)] for _ in range(rows)]
	""" Crea una matriz 2D (lista de listas) llamada board, de tama√±o rows x cols,
		llena de letras may√∫sculas aleatorias."""

	threads = [] # üßµ Crea una lista vac√≠a para almacenar los threads que se van a ejecutar.
	for word in words: # üîÅ Recorre cada palabra que se quiere insertar en el tablero.
		t = threading.Thread(target=place_word, args=(board, word)) # üîß Crea un nuevo hilo (Thread) que ejecutar√° la funci√≥n place_word con la palabra como argumento.
		t.start() # ‚ñ∂Ô∏è Inicia el hilo: esto hace que insert_word(word) se ejecute en paralelo con el resto del programa.
		threads.append(t) # ‚ûï Guarda el hilo en la lista threads para poder esperar a que termine m√°s adelante.

	for t in threads:
		t.join()
		""" üîö Espera a que todos los hilos terminen su ejecuci√≥n. 
			Esto asegura que todas las palabras se hayan insertado en el tablero antes de continuar."""
	return board
